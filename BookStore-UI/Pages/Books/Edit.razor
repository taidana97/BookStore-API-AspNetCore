@page "/books/edit/{Id}"
@attribute [Authorize(Roles = "Administrator")]

@inject IBookRepository _bookRepo
@inject IAuthorRepository _authorRepo
@inject IFileUpload _fileUpload
@inject NavigationManager _navManager
@inject IToastService _toastService

<h3 class="card-title">Edit Book</h3>
<hr />
<br />


@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <ErrorMessage Message="Invalid Selection. Please Try Again" />
}
else if (Model == null)
{
    <LoadingMessage Message="Loading Book Details" />
}
else
{
    <EditForm Model="Model" OnValidSubmit="HandleUpload">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="title">Book Title</label>
            <InputText @bind-Value="Model.Title" class="form-control" id="title" />
        </div>

        <div class="form-group">
            <label for="isbn">ISBN</label>
            <InputText @bind-Value="Model.Isbn" class="form-control" id="isbn" />
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber @bind-Value="Model.Price" class="form-control" id="price" />
        </div>

        <div class="form-group">
            <label for="author">Authors</label>
            <select @bind="@Model.AuthorId" class="form-control" id="author">
                <option value="">-- Select Author --</option>
                @if (Authors != null)
                {
                    foreach (var item in Authors)
                    {
                        <option value="@item.Id">@item.Firstname - @item.Lastname</option>
                    }
                }
            </select>
        </div>

        <div class="form-group">
            <label for="summary">Summary</label>
            <InputText @bind-Value="Model.Summary" class="form-control" id="summary" />
        </div>

        <div class="form-group">
            <label for="bookcover">Book Cover Photo</label>
            <InputFile OnChange="HandleFileSelection" />

            @if (isInvalidFileType)
            {
                <ErrorMessage Message="Please remove the invalid file type and select as new image, or leave this field blank" />
            }
            @if (!string.IsNullOrWhiteSpace(imageDataURL))
            {
                <img src="@imageDataURL" style="height:100px;width:100px" />
            }
            else if (!string.IsNullOrWhiteSpace(Model.Image))
            {
                <img src="uploads/@Model.Image" style="height:100px;width:100px" />
            }
        </div>

        <button class="btn btn-primary" type="submit">
            <span class="oi oi-pencil"></span>
            Submit Changes
        </button>

        <button class="btn btn-outline-secondary" @onclick="BackToList">
            <span class="oi oi-media-skip-backward"></span>
            Back To List
        </button>
    </EditForm>
}





@code {
    [Parameter]
    public string Id { get; set; }

    private Book Model = new Book();
    private IList<Author> Authors;
    private IFileListEntry file;
    private bool isSuccess = true;
    private bool isInvalidFileType = false;
    private bool isFileChanged = false;
    private string imageDataURL;
    private MemoryStream msFile;

    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);

        Authors = await _authorRepo.Get(Endpoints.AuthorsEndpoint);
        Model = await _bookRepo.Get(Endpoints.BooksEndpoint, id);
    }

    private async Task HandleUpload()
    {
        if (!isInvalidFileType)
        {
            if (file != null)
            {
                var ext = Path.GetExtension(file.Name);
                var picId = Guid.NewGuid().ToString().Replace("-", "");
                var picName = $"{picId}{ext}";

                //Remove Old Picture
                _fileUpload.RemoveFIle(Model.Image);

                _fileUpload.UploadFile(file, msFile, picName);

                Model.Image = picName;
            }
            else if (isFileChanged && file == null)
            {
                //Remove Old Picture
                _fileUpload.RemoveFIle(Model.Image);

                Model.Image = string.Empty;
            }

            isSuccess = await _bookRepo.Update(Endpoints.BooksEndpoint, Model, Model.Id);

            if (isSuccess)
            {
                _toastService.ShowWarning("Book Updated Successfully", "");
                BackToList();
            }
        }
    }

    private async Task HandleFileSelection(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        isFileChanged = true;

        if (file != null)
        {
            var name = file.Name;
            if (name.Contains("jpg") || name.Contains("png") || name.Contains("jpeg"))
            {
                msFile = new MemoryStream();
                await file.Data.CopyToAsync(msFile);

                var reader = new StreamReader(file.Data);
                var imageBase64Data = Convert.ToBase64String(msFile.ToArray());
                imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
                isInvalidFileType = false;
            }
            else
            {
                isInvalidFileType = true;
                imageDataURL = string.Empty;
            }
        }
        else
        {
            isInvalidFileType = false;
        }
    }


    private void BackToList()
    {
        _navManager.NavigateTo("/books/");
    }
}
